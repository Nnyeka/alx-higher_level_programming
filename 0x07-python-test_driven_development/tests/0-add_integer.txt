The ``add_integer`` module
===========================

The module defines an addition function ``add_integer(a, b=89)``.

Usage
===============

``add_integer(...)`` returns the addition of two arguments. 


Import module

    >>> add_integer = __import__("0-add_integer").add_integer

Check Docstring

>>> d = __import__("0-add_integer").__doc__
>>> len(d) > 1
True

Testing usual arguments
>>> add_integer(3, 4)
7


Testing negative argument
>>> add_integer(2, -2)
0


Testing assigned numbers b = 98
>>> add_integer(6)
104


Testing Floats
>>> add_integer(7.1, 1.9)
8


Testing floats and integer
>>> add_integer(2.0, 3)
5


Testing empty arguments
>>> add_integer()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: add_integer() missing 1 required positional argument: 'a'



Testing string arguments for b
>>> add_integer(4, "Best")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 16, in add_integer
    raise TypeError("b must be an integer")
TypeError: b must be an integer


Testing for string arguments for a
>>> add_integer("School", 4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 14, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer


Testing for string arguments for both a and b
>>> add_integer("space", "alien")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 14, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer


Testing for none numbers
========================


``add_integer(...)`` two arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:
::

>>> add_integer(2, float('nan'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 17, in add_integer
    return (int(a) + int(b))
ValueError: cannot convert float NaN to integer


::

>>> add_integer(None, None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 14, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer


::

>>> add_integer(3, 4, 5)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given



::

>>> add_integer(3, float('inf'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 17, in add_integer
    return (int(a) + int(b))
OverflowError: cannot convert float infinity to integer


::

>>> add_integer(float('inf'), 3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 17, in add_integer
    return (int(a) + int(b))
OverflowError: cannot convert float infinity to integer

::

>>> add_integer(float('inf'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 17, in add_integer
    return (int(a) + int(b))
OverflowError: cannot convert float infinity to integer
